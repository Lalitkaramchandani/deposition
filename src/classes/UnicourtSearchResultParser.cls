public class UnicourtSearchResultParser {
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

	public class Query {
		public List<String> search_terms {get;set;} 

		public Query(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'search_terms') {
							search_terms = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Query consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Post_data {
		public List<Query> query {get;set;} 
		public Integer page {get;set;} 

		public Post_data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'query') {
							query = arrayOfQuery(parser);
						} else if (text == 'page') {
							page = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Post_data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Boolean error {get;set;} 
	public String message {get;set;} 
	public Data data {get;set;} 

	public UnicourtSearchResultParser(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'error') {
						error = parser.getBooleanValue();
					} else if (text == 'message') {
						message = parser.getText();
					} else if (text == 'data') {
						data = new Data(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'UnicourtSearchResultParser consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Case_Z {
		public String case_type {get;set;} 
		public String case_type_category {get;set;} 
		public String case_type_group {get;set;} 
		public String case_status_category {get;set;} 
		public String case_status_name {get;set;} 
		public String courthouse {get;set;} 
		public String state {get;set;} 
		public String jurisdiction {get;set;} 
		public String last_updated_date {get;set;} 
		public String case_name {get;set;} 
		public String filing_date {get;set;} 
		public String case_id {get;set;} 
		public String case_number {get;set;} 
		public String docket {get;set;} 

		public Case_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'case_type') {
							case_type = parser.getText();
						} else if (text == 'case_type_category') {
							case_type_category = parser.getText();
						} else if (text == 'case_type_group') {
							case_type_group = parser.getText();
						} else if (text == 'case_status_category') {
							case_status_category = parser.getText();
						} else if (text == 'case_status_name') {
							case_status_name = parser.getText();
						} else if (text == 'courthouse') {
							courthouse = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'jurisdiction') {
							jurisdiction = parser.getText();
						} else if (text == 'last_updated_date') {
							last_updated_date = parser.getText();
						} else if (text == 'case_name') {
							case_name = parser.getText();
						} else if (text == 'filing_date') {
							filing_date = parser.getText();
						} else if (text == 'case_id') {
							case_id = parser.getText();
						} else if (text == 'case_number') {
							case_number = parser.getText();
						} else if (text == 'docket') {
							docket = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Case_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Attorneys {

		public Attorneys(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Attorneys consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public List<Result> result {get;set;} 
		public String total_matches {get;set;} 
		public Post_data post_data {get;set;} 
		public String criteria {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'result') {
							result = arrayOfResult(parser);
						} else if (text == 'total_matches') {
							total_matches = parser.getText();
						} else if (text == 'post_data') {
							post_data = new Post_data(parser);
						} else if (text == 'criteria') {
							criteria = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Result {
		public Case_Z case_Z {get;set;} // in json: case
		public List<Attorneys> attorneys {get;set;} 
		public List<Attorneys> parties {get;set;} 
		public List<Attorneys> judges {get;set;} 

		public Result(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'case') {
							case_Z = new Case_Z(parser);
						} else if (text == 'attorneys') {
							attorneys = arrayOfAttorneys(parser);
						} else if (text == 'parties') {
							parties = arrayOfAttorneys(parser);
						} else if (text == 'judges') {
							judges = arrayOfAttorneys(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Result consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static UnicourtSearchResultParser parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new UnicourtSearchResultParser(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Attorneys> arrayOfAttorneys(System.JSONParser p) {
        List<Attorneys> res = new List<Attorneys>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Attorneys(p));
        }
        return res;
    }


    private static List<Query> arrayOfQuery(System.JSONParser p) {
        List<Query> res = new List<Query>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Query(p));
        }
        return res;
    }








    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<Result> arrayOfResult(System.JSONParser p) {
        List<Result> res = new List<Result>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Result(p));
        }
        return res;
    }




}